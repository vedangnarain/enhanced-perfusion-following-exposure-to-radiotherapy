#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Created on Mon Aug 16 11:10:04 2021

@author: Vedang Narain (vedang.narain@msdtc.ox.ac.uk)
  
Tested in Python 3.7.4.

Calculate metrics of Hexagonal Network with log-normally distributed radii and
pruning thresholds. 

Used to generate figure in Transfer Report.

"""

# =============================================================================
# LIBRARIES & INITIALISATION
# =============================================================================

# Initialise libraries
#import matplotlib.colors as colors
import matplotlib.pyplot as plt
#from mpl_toolkits.mplot3d import Axes3D
import numpy as np
import pandas as pd
import scipy.io
import time

# Import tools for Paraview data
from get_paraview_data import *

# Starts stopwatch to clock execution time
start_time = time.time()

# Set LaTex-style font
from pathlib import Path
import matplotlib
matplotlib.rcParams['mathtext.fontset'] = 'stix'
matplotlib.rcParams['font.family'] = 'STIXGeneral'
matplotlib.rcParams.update({'font.size': 22})

# =============================================================================
# FUNCTIONS
# =============================================================================

# Define a function to read an O2 distribution .vti file and return the basic stats
def get_distribution_stats(solver_name, layout_selection, sigma, threshold, hypoxic_threshold_list, plot=0, read=0):    

    
    # Set the file path
#    folder_path = '/home/narain/Desktop/Stochastic Pruning with 100 Trials/' + solver_name + 'Haematocrit/Lambda4/Alpha' + alpha_value + '/Beta' + beta + '/Trial' + trial
    folder_path = main_folder_path + solver_name + 'Haematocrit/Mu' + sigma + '/Selection' + layout_selection + '/RadiusThreshold' + threshold
    field_path =  folder_path + '/oxygen_solution_0.vti'
    network_path = folder_path + '/FinalHaematocrit.vtp'

    # Print status update
    print(field_path)

    # Save file or read from existing file
    if read==0:    
        
        # Compute the architectural metrics
        n_vessels, n_perfused_vessels, n_unperfused_vessels, mean_diameter, mean_geometric_resistance, diameter_adjacency_matrix, length_adjacency_matrix = get_hex_predictors(network_path, vessel_length_m, reference_node_coordinates, inlet_radius_m, pq_threshold)
    
    # Write the adjacency matrices to .mat files
    matrix_name = 'mu' + sigma + '_selection' + layout_selection + '_radiusthreshold' + threshold  
    scipy.io.savemat(main_folder_path + 'DiameterAdjacencyMatrices/' + matrix_name + '_diameter_adjacency_matrix' + '.mat', {matrix_name+ '_diameter_adjacency_matrix': diameter_adjacency_matrix})
    scipy.io.savemat(main_folder_path + 'LengthAdjacencyMatrices/' + matrix_name + '_length_adjacency_matrix' + '.mat', {matrix_name+ '_length_adjacency_matrix': length_adjacency_matrix})
    
    return 0, 0, 0, 0, 0, 0, n_vessels, n_perfused_vessels, n_unperfused_vessels, mean_diameter, mean_geometric_resistance, diameter_adjacency_matrix, length_adjacency_matrix

'''
        # Compute the O2 distribution
        field_data, field_spacing = get_vti_data(field_path)  # import the data for the network
        middle_field = get_hex_domain(field_data, field_spacing)  # get the distribution in the middle of the field (replace with designated file)
        
        # Plot the O2 distribution if desired
        if plot==1:  # plot the O2 distribution
            O2_field, _ = get_plottable_field(middle_field)  # get the O2 mesh for plots and stats
            fig = plt.figure()
            ax = plt.axes()
            colour_map = plt.cm.get_cmap('jet')
            plt.suptitle('O$_2$ distribution generated by the ' + solver_name + ' solver in the hexagonal vessel network with radii selection = ' + layout_selection + ' (σ = ' + sigma + ' and radius threshold = ' + threshold + '  vessels (1 unit = ' + str(field_spacing [0]) + ' μm)')
            ref_map = ax.imshow(O2_field, cmap=colour_map, origin='lower')
            fig.colorbar(ref_map, ax=ax, label='nM')
            plt.show()
        flat_field = middle_field['oxygen'].to_numpy().flatten()
#        np.save('/home/narain/Temporary Python Files/Radius Threshold Pruning/' + solver_name + 'Haematocrit_Selection' + layout_selection + '_Sigma' + sigma + '_RadiusThreshold' + threshold + '_Distribution.npy', flat_field)
#    else:
#        flat_field = np.load('/home/narain/Temporary Python Files/Radius Threshold Pruning/' + solver_name + 'Haematocrit_Selection' + layout_selection + '_Sigma' + sigma + '_RadiusThreshold' + threshold + '_Distribution.npy')

    # Get the basic stats 
#    middle_O2_stats = pd.DataFrame(flat_field).describe()
            
    # Get the number of total points
    number_of_points = 1
    for dim in np.shape(flat_field): number_of_points *= dim

    # Calculate the number of points below the given hypoxic thresholds
    hypoxic_fraction_list = []
    for hypoxic_threshold in hypoxic_threshold_list:
        hypoxic_points = (flat_field < hypoxic_threshold).sum()
        hypoxic_fraction = hypoxic_points/number_of_points  # calculate the hypoxic fraction
#        print(hypoxic_threshold, hypoxic_points)
        hypoxic_fraction_list.append(hypoxic_fraction)

    # Return the stats
#    return hypoxic_fraction_list, np.mean(flat_field), np.amin(flat_field), np.percentile(flat_field, 50), np.amax(flat_field), np.std(flat_field), n_vessels, mean_diameter, mean_geometric_resistance, diameter_adjacency_matrix, length_adjacency_matrix
'''

# Define function to compute the average of all layouts in a threshold selection
def compute_average_threshold(solver_name, sigma, threshold, max_layouts, hypoxic_threshold_list, plot, read):
    
    # Create table to store all the threshold data trials in an alpha group
    threshold_table = np.array([])

    # Extract metrics from all trials and store in table
    for layout_selection in range(1, max_layouts+1):    
#        print(layout_selection)
        hypoxic_fraction_list, mean_value, min_value, half_value, max_value, std_value, n_vessels_value, n_perfused_vessels_value, n_unperfused_vessels_value, mean_diameter_value, mean_geometric_resistance_value, diameter_adjacency_matrix_value, length_adjacency_matrix_value = get_distribution_stats(solver_name, str(layout_selection), sigma, str(threshold), hypoxic_threshold_list, plot, read)
        table_entry = np.hstack([hypoxic_fraction_list, mean_value, min_value, half_value, max_value, std_value, n_vessels_value, n_perfused_vessels_value, n_unperfused_vessels_value, mean_diameter_value, mean_geometric_resistance_value])
        threshold_table = np.vstack([threshold_table, table_entry]) if threshold_table.size else table_entry

    # Return the hypoxic fractions, mean, min, 50%, max, and std for a threshold averaged across all layouts
    return np.average(threshold_table, axis=0)
#    return np.average(threshold_table[0]), np.average(threshold_table[1]), np.average(threshold_table[2]), np.average(threshold_table[3]), np.average(threshold_table[4])

# Define a function to return statistics for all the heterogeneities in the data
def get_solver_stats(solver_name, alpha_list, threshold_list, max_layouts, hypoxic_threshold_list, plot, read):
#    table = np.array([])
    alpha_table = np.array([])
    for sigma in alpha_list:
        for threshold in threshold_list:    
            average_threshold_data = compute_average_threshold(solver_name, sigma, threshold, max_layouts, hypoxic_threshold_list, plot, read)
            table_entry = np.hstack([float(sigma), float(threshold), average_threshold_data])
            alpha_table = np.vstack([alpha_table, table_entry]) if alpha_table.size else table_entry
    return alpha_table

# =============================================================================
# DISTRIBUTION STATS & HYPOXIC FRACTIONS
# =============================================================================

# Enter details to allow looping over folders
main_folder_path = '/scratch/narain/Hexagonal/Log Normal Distribution/Radius Threshold Pruning in Hexagonal Network with 100 Selections and Varying Means with SD of 13/TestHexagonalNetwork/'
solver_list = ['Constant', 'Pries', 'Memory', 'Fung']
alpha_list = ['10', '13', '16', '19']
max_threshold = 20
max_layouts = 100
threshold_list = [str(x) for x in range(0, max_threshold + 1)]
#hypoxic_threshold_list = [2195, 10000, 15000, 20000, 25000, 27441] 
#hypoxic_threshold_list = [2195, 5488, 10976, 16465, 21953, 27441] 
hypoxic_threshold_list = [2195, 27441] 
#hypoxic_threshold_list_pp = [0.8, 2, 4, 6, 8, 10] 

# Set network details (in metres)
vessel_length_m = 100*(10**-6)
inlet_radius_m = 7.500000e-05
pq_threshold = 1.e-13

# Get reference hexagonal network (all node coordinates are the same, regardless of heterogeneity)
reference_node_coordinates = get_reference_hexagonal_network(vessel_length_m)

# Set solver name
solver_name = solver_list[0]

# Get the stats for all solvers (change to read=1 to extract from .vti files directly)
solver_stats = get_solver_stats(solver_name, alpha_list, threshold_list, max_layouts, hypoxic_threshold_list, plot=0, read=0)

# Save array
np.save(main_folder_path + solver_name + 'Haematocrit/python_solver_data.npy', solver_stats)
solver_stats = np.load(main_folder_path + solver_name + 'Haematocrit/python_solver_data.npy')

# Filter by alpha
alpha_array, hypoxic_fraction_composite, mean_composite, min_composite, half_composite, max_composite, sd_composite, n_vessels_composite, n_perfused_vessels_composite, n_unperfused_vessels_composite, mean_diameter_composite, mean_geometric_resistance_composite = filter_by_alpha(alpha_list, solver_stats)

# =============================================================================
# PERFUSION QUOTIENTS
# =============================================================================

# Define a function to generate the data for a single alpha value
def get_alpha_line(alpha_group, max_threshold):
    
    # Compute the averages for the thresholds in the alpha group
    mean_pq_table = np.array([])
    sd_pq_table = np.array([])

    alpha_threshold_grouped = alpha_group.groupby(alpha_group.threshold)
    for threshold in range(0, max_threshold+1):
        mean_pq_table_entry = np.array([])
        sd_pq_table_entry = np.array([])
        alpha_threshold_group = alpha_threshold_grouped.get_group(threshold)
        mean_pq_table_entry = np.array([alpha_threshold_group["alpha"].mean(), alpha_threshold_group["threshold"].mean(), alpha_threshold_group["PQ"].mean()])
        sd_pq_table_entry = np.array([alpha_threshold_group["alpha"].mean(), alpha_threshold_group["threshold"].mean(), alpha_threshold_group["PQ"].std()])
        mean_pq_table = np.vstack([mean_pq_table, mean_pq_table_entry]) if mean_pq_table.size else mean_pq_table_entry
        sd_pq_table = np.vstack([sd_pq_table, sd_pq_table_entry]) if sd_pq_table.size else sd_pq_table_entry
    
    # Return the table for reference
    return mean_pq_table, sd_pq_table

# Read PQ file
filename = main_folder_path + 'hex_lognormal_radius_threshold_perfusion_quotients.txt'
pq_df = pd.read_csv(filename, delim_whitespace=True, names=["network_name", "solver_name", "alpha", "selection", "threshold", "PQ"])
#pq_df = pd.read_csv(filename, delim_whitespace=True, names=["alpha", "threshold", "PQ"], skiprows=1)

# Filter PQ data for multiple solvers
solver_filter = solver_name + 'Haematocrit'
pq_df = pq_df.loc[(pq_df["solver_name"] == solver_filter)]

# Drop extra data
#max_beta = 35
#pq_df = pq_df.loc[(pq_df["beta"] <= max_beta)]
'''
# Separate by alpha 
alpha_grouped = pq_df.groupby(pq_df.alpha)
#alpha_0 = alpha_grouped.get_group(0)
alpha_1 = alpha_grouped.get_group(1)
alpha_2 = alpha_grouped.get_group(2)
alpha_3 = alpha_grouped.get_group(3)
alpha_4 = alpha_grouped.get_group(4)
'''
# Separate by alpha 
alpha_grouped = pq_df.groupby(pq_df.alpha)
#alpha_0 = alpha_grouped.get_group(0)
alpha_1 = alpha_grouped.get_group(int(alpha_list[0]))
alpha_2 = alpha_grouped.get_group(int(alpha_list[1]))
alpha_3 = alpha_grouped.get_group(int(alpha_list[2]))
alpha_4 = alpha_grouped.get_group(int(alpha_list[3]))

# Compute average of all selections for PQ
line_1, line_1_sd = get_alpha_line(alpha_1, max_threshold)
line_2, line_2_sd = get_alpha_line(alpha_2, max_threshold)
line_3, line_3_sd = get_alpha_line(alpha_3, max_threshold)
line_4, line_4_sd = get_alpha_line(alpha_4, max_threshold)

# Combine the PQs
pq_composite = np.hstack([line_1, line_2, line_3 ,line_4])
sd_pq_composite = np.hstack([line_1_sd, line_2_sd, line_3_sd, line_4_sd])

# =============================================================================
# PLOTS FOR O2 STATS, PQ, AND HF
# =============================================================================
'''
# Set the figure layout
fig, axs = plt.subplots(3, len(alpha_list), figsize=(20, 12), tight_layout = {'pad': 2})
fig.subplots_adjust(hspace = .5, wspace=.25)
linestyles = ['solid', 'dashed', 'dotted', 'dashdot', (0,(5,10)), (0, (3, 1, 1, 1, 1, 1))]
linecolours = ['#1f77b4','b','b','b','b', 'r']
linelegends = ['anoxia', 2, 4, 6, 8, 'hypoxia']
#plt.suptitle(solver_name + ' haematocrit solver in the heterogeneous hexagonal vessel network with radius threshold pruning')

# Plot the distribution stats for a solver
axs = axs.ravel()
for i in range(len(alpha_list)):
    axs[i].set_ylim([0,30000])
    axs[i].plot(alpha_array[:,1], mean_composite[i], ls='dashed', label='mean')
    axs[i].plot(alpha_array[:,1], min_composite[i], ls='dotted', label='min')
#    axs[i].plot(alpha_array[:,1], half_composite[i], ls=(0, (3, 5, 1, 5)), label='50%')
    axs[i].plot(alpha_array[:,1], max_composite[i], ls='dashdot', label='max')
    axs[i].plot(alpha_array[:,1], sd_composite[i], ls='solid', label='SD')
    axs[i].ticklabel_format(axis="y", style="sci", scilimits=(0,0))
#    axs[i].set_xlabel('radius threshold (μm)')    
    if i==0:
        axs[i].set_ylabel('oxygen (nM)') 
        axs[i].legend(loc="best", prop={'size': 15})
    axs[i].set_xlim(0)
#    axs[i].set_ylim(0)
    axs[i].grid()
    axs[i].title.set_text('${σ}$ = ' + alpha_list[i])

# Plot the PQ for a solver
for i in range(len(alpha_list),len(alpha_list)*2):
    axs[i].set_ylim([0,1.1])  # set PQ limits
    axs[i].plot(line_1[:,1], pq_composite[:, (3*i)-10], label='PQ')
#    axs[i].set_xlabel('radius threshold (μm)')    
    if i==len(alpha_list):
        axs[i].set_ylabel('PQ') 
    axs[i].set_xlim(0)
    axs[i].set_ylim(0)
#    axs[i].legend()
    axs[i].grid()

# Plot the HF for a solver
for i in range(len(alpha_list*2),len(alpha_list)*3):
    offset = i-len(alpha_list*2)
    for threshold_index in range(len(hypoxic_threshold_list)):  # plot a line for each threshold
        if threshold_index==0 or threshold_index==5:
            axs[i].plot(alpha_array[:,1], hypoxic_fraction_composite[offset*len(threshold_list):(offset+1)*len(threshold_list), threshold_index], label=linelegends[threshold_index], ls=linestyles[threshold_index], c=linecolours[threshold_index])
        if i==len(alpha_list*2):
            axs[i].set_ylabel('HF/AF') 
            axs[i].legend(loc="best", prop={'size': 15})
        axs[i].set_xlabel('radius threshold (μm)')    
        axs[i].set_xlim(0)
        axs[i].set_ylim([0,1.1])  # set HF limits
        axs[i].grid(b=True)

# Show plots
plt.show()

# Save image
file_path = Path('~/Desktop/Final Figures/' + solver_name + '_lognormal_hexagonal_radius_threshold_pruning.svg').expanduser()
fig.savefig(file_path, dpi=500, bbox_inches = 'tight')
file_path = Path('~/Desktop/Final Figures/' + solver_name + '_lognormal_hexagonal_radius_threshold_pruning.png').expanduser()
fig.savefig(file_path, dpi=500, bbox_inches = 'tight')
'''
# =============================================================================
# PLOTS FOR GEOMETRIC METRICS
# =============================================================================

# Set the figure layout
fig, axs = plt.subplots(4, len(alpha_list), figsize=(20, 20), tight_layout = {'pad': 2})
fig.subplots_adjust(hspace = .5, wspace=.25)
linestyles = ['solid', 'dashed', 'dotted', 'dashdot', (0,(5,10)), (0, (3, 1, 1, 1, 1, 1))]
linecolours = ['#1f77b4','r']
#plt.suptitle(solver_name + ' haematocrit solver in the heterogeneous hexagonal vessel network with stochastic pruning')

# Plot the distribution stats for a solver
axs = axs.ravel()
offset = len(alpha_list)
for i in range(len(alpha_list)):
    axs[i].plot(alpha_array[:,1]*2, n_vessels_composite[i], label='total')
    axs[i].plot(alpha_array[:,1]*2, n_perfused_vessels_composite[i], ls='dashed', label='perfused')
    axs[i].plot(alpha_array[:,1]*2, n_unperfused_vessels_composite[i], ls='dotted', label='unperfused')
    axs[i].set_xlim(0)
    axs[i].set_ylim(0,500)
#    axs[i].ticklabel_format(axis="y", scilimits=(0,0))
#    axs[i].set_xlabel('radius threshold (μm)')    
    if i==0:
        axs[i].set_ylabel('number of vessels') 
        axs[i].legend()
    axs[i].grid()
    axs[i].title.set_text('${µ}$ = ' + alpha_list[i])

# Plot the PQ for a solver
for i in range(len(alpha_list),len(alpha_list)*2):
    axs[i].set_ylim([0,1.1])  # set PQ limits
    axs[i].plot(alpha_array[:,1]*2, pq_composite[:,(3*i)-10])
    axs[i].fill_between(alpha_array[:,1]*2, pq_composite[:,(3*i)-10]+sd_pq_composite[:, (3*i)-10], pq_composite[:,(3*i)-10]-sd_pq_composite[:, (3*i)-10], color='grey', alpha=0.5, label='mean ± SD')
    axs[i].set_xlim(0)
#    axs[i].set_xlabel('radius threshold (μm)')    
    if i==len(alpha_list):
        axs[i].set_ylabel('PQ') 
    axs[i].legend()
    axs[i].grid()
    
# Plot the mean diameter for a solver
for i in range(len(alpha_list)*2,len(alpha_list)*3):
#    axs[i].set_ylim([0,1.1])  # set PQ limits
#    print(i,offset,i-offset)
    axs[i].plot(alpha_array[:,1]*2, mean_diameter_composite[i-offset*2])
    axs[i].set_xlim(0)
    axs[i].set_ylim([0,100])
#    axs[i].set_xlabel('radius threshold (μm)')    
    if i==len(alpha_list*2):
        axs[i].set_ylabel('mean diameter (μm)') 
#    axs[i].legend()
    axs[i].grid()
    
# Plot the mean geometric resistance for a solver
for i in range(len(alpha_list)*3,len(alpha_list)*4):
#    axs[i].set_ylim([0,1.1])  # set PQ limits
#    print(i,offset,i-offset)
    axs[i].plot(alpha_array[:,1]*2, mean_geometric_resistance_composite[i-offset*3])
    axs[i].set_xlim(0)
    axs[i].set_ylim([0,4])
    axs[i].set_xlabel('diameter threshold (μm)')    
    if i==len(alpha_list*3):
        axs[i].set_ylabel('mean geometric resistance') 
#    axs[i].legend()
    axs[i].grid()

# Show plots
plt.show()

# Save image
file_path = Path('~/Desktop/Final Figures/' + solver_name + '_lognormal_hexagonal_radius_threshold_pruning_geometric_metrics.svg').expanduser()
fig.savefig(file_path, dpi=500, bbox_inches = 'tight')
file_path = Path('~/Desktop/Final Figures/' + solver_name + '_lognormal_hexagonal_radius_threshold_pruning_geometric_metrics.png').expanduser()
fig.savefig(file_path, dpi=500, bbox_inches = 'tight')

# Prints execution time
print("\n--- Execution Time: %s seconds ---" % (time.time() - start_time))
